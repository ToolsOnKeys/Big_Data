#SQL分类
1、DDL：数据定义语言，这些语句定义了不同的数据段、数据库、表、列、索引等数据库对象。（create、drop、alter等）
2、DML:数据操作语言，用于添加、删除、更新、查询数据库的记录，并检查数据的完整性。（insert、delete、update、select等）
3、DCL：数据控制语言，用于控制不同数据段直接的许可和访问级别的语句。这些语句定了数据库、表、字段、用户的访问权限和安全级别。（grant、revoke等）


#DDL
1、操作Database
①、show databases    （权限允许下可执行）
②、create database 数据库名
③、drop database 数据库名
④、use 数据库名
⑤、select database（）；查看当前正在使用的数据库
2、操作Table
|-show tables；  前提已进入对一个的数据库
|-show tables from 数据库名
|-create table 表名（
字段 数据类型 【primary key】 【not null】【auto_incerment】【default ‘值’】
）【Engine=引擎】【auto_increment = 起始值】。。。
|-desc 表名称； 查看表结构
|-show create table 表名；查看见表语句
|-drop 表名称；（注意：数据和结构都会被删除；所有正在运行的相关事务被提交；所有相关的索引被删除；该语句无法回滚）
|-alter table 表名 rename 新表名；
|-rename table 表名 to 新表名；
|-alter table 表名 add【columen】列名 数据类型 【default 默认值】【not null】【after 列名/first】；
|-alter table 表名 drop 【column】列名；
|-alter table 表名 modify 【column】列名 数据类型 【default 默认值】【not null】【after 列名/first】；
|-alter table 表名 change 【column】列名 新列名 数据类型【default 默认值】【not null】；
3、约束：Constraints
①、数据完整性是指数据的精确性和可靠性。他是应防止数据库中存在不符合语义规定的数据和防止因错误信息的输入输出造成无效操作或错误信息而提出的。数据的完整性，如下：
|-实体完整性：主键
|-域完整性：值的范围要合理完整
|-引用完整性：外键
|-用户自定义的完整性
②、常用的约束：
|-主键、外键、唯一键
|-not null
|-check 约束
|-default 约束
|-自增约束
③、查看某个表的约束和索引
|-select * from information_schema.table_constraints where table_name ='表名称'；
|-show index from 表名；
|-show create table 表名；
④、主键约束
|-primary key
|-primary key（列名，列名...）
|-alter table 表名 add primary key（列名，列名...）；
-alter table 表名 drop primary key；
⑤、唯一键 Unique key，UK
|-unique
|-unique（列名，列名...）
|-alter table 表名 add unique（列名，列名....）
|-alter table 表名 drop index 唯一索引约束名
⑥、外键
|-foreign key（列名） references 表名（列名）【on update cascade/set null on delete set null/restrict】
|-alter table 表名 add foreign key（列名） references 主表（列名）【on update cascade/set null on delete set null/restrict】；
|-alter table 表名 drop foreign key 列名；
⑦、非空约束
|-not null
|-alter table 表名 modify 列名 数据类型；设置为无非空控制
|-alter table 表名 modify 列名 数据类型 not null；
⑧、检查约束
|-mysql不支持，添加无限制
⑨、default缺省约束
|-alter table 表名 modify 列名 数据类型 default ‘值’；
⑩、自增列：auto_increment
|-auto_increment
|-整型；只允许一个字段设置为自增长；非空；主键或唯一键；插入时null或0；
#常用命令
1、set profiling=1；开启profile
2、show profiles；查看最近的几次查询周期情况
3、show engines；查看所有的数据库引擎情况
4、show variables like '%storage_engine%'；查看默认的数据库引擎


#索引
优缺点：
①优点：
|-提高数据检索的效率，降低数据库的IO成本。
|-通过索引列对数据进行排序，降低数据排序的成本，降低了CPU的消耗
②、缺点：
|-降低了更新表的速度
|-实际上索引也是一张表，该表保存了主键和索引的字段，并只想实体表的记录，所以索引列也是占用空间的。
	#B+树更适合操作系统文件索引和数据库索引的原因
①、B+树对磁盘的读写代价更低：B+树的内部节点并没有指向关键字具体的信息指针，因此器内部节点相对于B树更小。如果把所有同一内部阶段的关键字存放在同一块中，那么盘块所能容纳的关键字数量就越多。一次性读入内存中需要查找的关键字就越多。相对于IO读写次数就降低了。
②、B+树的查询效率更加稳定：由于非终结点并不是最终指向文件内容的节点，而只是叶子节点中关键字的索引。所以任何关键字的查找必须走一条从根节点到叶子节点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。
	#聚簇索引
1、聚簇索引并不是一种单独的索引类型，而是一种数据存储方式。
2、优点：按照聚簇索引排列顺序，查询显示一定范围数据的时候，由于数据都是紧密相连，数据库不用从多个数据块中提取，所以节省了大量的IO操作。
3、限制：
|-对于mysql数据库目前只有innodb数据引擎支持聚簇索引，而Myisam并不支持聚簇索引。
|-由于数据物理存储排序方式只能有一种，所以每个Mysql的表只能由一个聚簇索引。一般情况下就是该表的主键
|-为了充分利用聚簇索引的聚簇特征，所以innodb表的主键列尽量算用有序的顺序id，而不建议用无序的id。
	#基本操作：
1、create 【unique】index【索引名】on 表名（列名）；创建索引
2、drop index【索引名】on 表名；删除索引
	#索引创建的时机：
①、适合创建索引的情况：
|-主键自动建立唯一索引；
|-频繁作为查询条件的字段应该创建索引；
|-查询中与其他表关联的字段，外键关系建立索引
|-单键/组合索引的选择问题，组合索引性价比更高
|-查询中排序的字段，排序字段若通过索引去访问将大大提高排序的速度
|-查询中统计或者分组的字段
②、不适合创建索引的情况
|-表记录太少
|-经常修改的表或字段
|-where条件用不到的字段不创建索引
|-过滤性不好的
