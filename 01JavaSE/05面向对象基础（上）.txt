#类与对象
1、类：一类具有相同特性的事物的“抽象”描述。类创建对象的模板。
2、对象：是一类事物中的一个“具体”的个体、实列。
#类的成员-属性
1、属性的类型可以是java的任意类型，包括基本数据类型、引用数据类型；属性的声明的位置必须在类中方法外
2、属性有默认值
3、属性对于每个对象都是相对独立的（静态属性：同一个类的对象公用一个）
#类的成员-方法
1、一个独立可复用的功能即方法（或函数），可复用
2、方法声明和调用的原则：
|-方法必须先声明后调用
|-方法声明的位置必须在类中方法外
|-方法的调用位置有要求
|-方法的调用格式要与方法的声明的格式对应。
3、方法调用的内存分析：
方法不调用不执行，调用一次执行一次，每次调用都会在栈中有一个入栈动作，即给当前方法开辟一块独立的内存区域，用于存储当前方法的局部变量的值，当方法执行结束后，会释放该内存，称为出栈，如果方法有返回值，就会把结果返回调用处，如果没有返回值，就直接结束，回到调用处继续执行下一条指令。
4、可变参数
|-当我们在声明一个方法，需要额外的数据来辅助完成方法的功能，但这个时候数据类型是确定的，但是个数不确定，那么这个时就可以考虑使用可变参数。
|-注意：①、一个方法中最多只有一个可变参数；②、这个可变参数必须在形参列表的最后一个；③、可变参数的数据类型可以是Java的任意类型
|-在声明可变参数的方法中，可变参数可以看成数组使用；方法调用时，非可变参数部分，实参的个数、类型、顺序于形参一一对应，有一个传一个；对于可变参数部分，我们可以传入0~n个对应类型的实参，也可以传入对应类型的数组对象。
5、方法的重载：
|-在同一个类中，当方法名称相同，形参的列表不同的两个或多个方法称为方法的重载。和返回值类型无关。即要求同名方法的传参列表存在差异就可以实想重载。
6、方法的参数传递机制：值传递
|-形参是基本数据类型，实参给形参赋“数据值”，形参的修改和实参完全无关
|-形参是应用数据类型时，实参给形参“地址值”，如果直接通过形参去修改对象的属性或元素，那么会影响实参，因为此时实参和形参指向“同一个对象”；但是如果把形参“重新”指向“新对象”时，那么形参的修改就和实参无关了。
7、命令行参数：
|-给main传的实参，因为是在运行Java命令时，传入的参数，所以叫做命令行参数。
|-java 类名 参数1 参数2 ......
8、递归调用：
|-一个方法直接或间接的自己调用自己
|-递归方法必须有终止条件，否则会出现“StacakOverflowError”栈内存溢出；
|-递归调用不宜太深，否则会效率很低，或者内存溢出。
#对象数组：
元素是引用数据类型，也称为对象数组，即数据的元素是对象
1、一维对象数组：
|-一维对象数组，首先要创建数组对象本身，确定数组的长度，然后在创建每一个元素对象，如果不创建，数组的元素的默认值就是null，所以很容易出现空指针异常
2、二维对象数组：
|-二维对象数组，首先创建数组对象本身，即确定数组的行数，然后再确定每一行的列数，然后再创建每一个元素对象，如果不创建，数组的元素的默认值为null，所以很容易出现空指针异常。
|-创建三种对象：二维数组对象，行对象，元素对象
